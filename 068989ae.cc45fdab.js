(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{291:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var o=n(0),a=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,d=p["".concat(r,".").concat(m)]||p[m]||b[m]||i;return n?a.a.createElement(d,s(s({ref:t},l),{},{components:n})):a.a.createElement(d,s({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var o=n(2),a=n(6),i=(n(0),n(291)),r={id:"activecampaign-webhooks",title:"Communication Between ActiveCampaign, WordPress, & ActiveMember360 Using API & Webhooks/REST Hooks",description:null,sidebar_label:"Overview"},s={unversionedId:"fundamentals/activecampaign-webhooks",id:"fundamentals/activecampaign-webhooks",isDocsHomePage:!1,title:"Communication Between ActiveCampaign, WordPress, & ActiveMember360 Using API & Webhooks/REST Hooks",description:"Overview",source:"@site/docs/fundamentals/activecampaign-webhooks.mdx",slug:"/fundamentals/activecampaign-webhooks",permalink:"/am360docs/fundamentals/activecampaign-webhooks",version:"current",sidebar_label:"Overview",sidebar:"fundamentals",previous:{title:"Fundamentals",permalink:"/am360docs/fundamentals"},next:{title:"Visitor Types",permalink:"/am360docs/fundamentals/visitor-types"}},c=[{value:"Overview",id:"overview",children:[]},{value:"API",id:"api",children:[]},{value:"Webhooks/REST Hooks",id:"webhooksrest-hooks",children:[]},{value:"Configuration for API Communication",id:"configuration-for-api-communication",children:[]},{value:"Configuration of Webhooks/REST Hooks",id:"configuration-of-webhooksrest-hooks",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"overview"},"Overview"),Object(i.b)("p",null,"Integration and communication between ActiveCampaign and ActiveMember360 can be achieved using two methods, either by the ActiveCampaign API and/or by webhooks/REST Hooks."),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("p",null,"API stands for Application Programming Interface."),Object(i.b)("p",null,"ActiveMember360 uses the ActiveCampaign API for two purposes:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"To provide ActiveCampaign with the latest data. For example, if a tag is added to the logged in user within WordPress ActiveMember360 requests using the API that a tag be added to the relevant contact in ActiveCampaign and receives as a response whether this operation was successful or not.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"To pull data from ActiveCampaign for use within the WordPress site. For example, upon login ActiveMember360 requests from ActiveCampaign all data related to the contact email address associated with the user who has successfully logged in and receives all ActiveCampaign contact data as a response."))),Object(i.b)("p",null,"In both cases ActiveMember360 makes a request to ActiveCampaign API and will then receive a response."),Object(i.b)("p",null,"So, think of an API request and response as the software equivalent of using directory enquiries. You ask for a phone number for someone and the response by the operative provides that."),Object(i.b)("h2",{id:"webhooksrest-hooks"},"Webhooks/REST Hooks"),Object(i.b)("p",null,"When using a webhook with ActiveCampaign no request is required. A webhook just sends the data when it\u2019s available."),Object(i.b)("p",null,"In this case the data is pushed to the WordPress site running ActiveMember360 automatically by ActiveCampaign."),Object(i.b)("p",null,"The webhook is a way for ActiveCampaign to provide ActiveMember360 with real-time information. A webhook delivers data as it happens, meaning the most current data is available immediately."),Object(i.b)("p",null,"So, this is the equivalent of being sent a new phone directory automatically every time someone is added to the directory, or their details change."),Object(i.b)("p",null,"ActiveMember360 could use ActiveCampaign API to ensure it is always working with the current data. However, as ActiveMember360 has no way of knowing when data has changed within ActiveCampaign it does not know when to make an API request for the current data, meaning it would have to continually send API requests to ensure all was current. A very inefficient process."),Object(i.b)("p",null,"This makes webhooks much more efficient for this purpose than continual API requests/polling."),Object(i.b)("p",null,"When the webhook is executed it will make a HTTP request (typically a HTTP POST) to the ActiveMember360 WordPress site, and ActiveMember360 then updates the local contact data for immediate use."),Object(i.b)("p",null,"REST Hooks are essentially webhooks with predefined triggers and/or conditions to automatically process the webhook (sometimes referred to as webhooks with subscriptions). This makes REST Hooks easier to configure for a user than webhooks. REST Hooks in most cases can be configured directly by an application without any user involvement."),Object(i.b)("p",null,"Within ActiveCampaign REST Hooks are not named as such. They are the webhooks which are defined/listed in your ActiveCampaign application ",Object(i.b)("strong",{parentName:"p"},"ActiveCampaign, Settings, Developer, Manage Settings"),"."),Object(i.b)("p",null,"Within ActiveCampaign automations you can define as a Condition and Workflow a webhook. These are always manually defined and are completely separate to REST Hooks."),Object(i.b)("h2",{id:"configuration-for-api-communication"},"Configuration for API Communication"),Object(i.b)("p",null,"The setting of the API connection for ActiveCampaign can be found in the following article:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"How To Connect ActiveCampaign API To WordPress/ActiveMember360")),Object(i.b)("h2",{id:"configuration-of-webhooksrest-hooks"},"Configuration of Webhooks/REST Hooks"),Object(i.b)("p",null,"The configuration of webhooks/REST Hooks for each primary CRM can be found in the following articles:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"How To Configure ActiveCampaign Webhooks")))}u.isMDXComponent=!0}}]);